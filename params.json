{
  "name": "Dns-zone-configurator",
  "tagline": "Php library for parsing and editing dns zones files programmatically with high level abstraction.",
  "body": "# dns-zone-configurator\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/ltd-beget/dns-zone-configurator/version)](https://packagist.org/packages/ltd-beget/dns-zone-configurator) \r\n[![Total Downloads](https://poser.pugx.org/ltd-beget/dns-zone-configurator/downloads)](https://packagist.org/packages/ltd-beget/dns-zone-configurator)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/LTD-Beget/dns-zone-configurator/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/LTD-Beget/dns-zone-configurator/?branch=master)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/LTD-Beget/dns-zone-configurator/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/LTD-Beget/dns-zone-configurator/?branch=master)\r\n[![Build Status](https://scrutinizer-ci.com/g/LTD-Beget/dns-zone-configurator/badges/build.png?b=master)](https://scrutinizer-ci.com/g/LTD-Beget/dns-zone-configurator/build-status/master)\r\n[![Documentation](https://img.shields.io/badge/code-documented-brightgreen.svg)](http://ltd-beget.github.io/dns-zone-configurator/documentation/html/index.html)\r\n[![Documentation](https://img.shields.io/badge/code-coverage-brightgreen.svg)](http://ltd-beget.github.io/dns-zone-configurator/coverage/)\r\n[![License MIT](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/LTD-Beget/dns-zone-configurator/blob/master/LICENSE)\r\n\r\n\r\nPhp library for parsing and editing dns zones files programmatically with high level abstraction.\r\n\r\n## Installation\r\n\r\n```shell\r\ncomposer require ltd-beget/dns-zone-configurator\r\n```\r\n\r\n## Usage\r\n\r\n```php\r\n<?php\r\n    use LTDBeget\\dns\\configurator\\Zone;\r\n    \r\n    require './vendor/autoload.php';\r\n    \r\n    // get you zone file content\r\n    $content = file_get_contents(__DIR__.\"/dns/zones/zone.conf\");\r\n    \r\n    // make zone object from plain content\r\n    $zone = Zone::fromString(\"voksiv.ru.\", $content);\r\n    \r\n    // iterate via nodes of zone, where Node is group of resource records with same name\r\n    foreach ($zone->iterateNodes() as $node) {\r\n        $node->getName();\r\n        $node->getZone();\r\n    }\r\n    \r\n    // or get concrete node\r\n    if($zone->isNodeExist(\"node.name\")) {\r\n        $node = $zone->getNode(\"node.name\");\r\n        $node->getName();\r\n        $node->getZone();\r\n    }\r\n    \r\n    // also you can iterate via resource records in zone\r\n    foreach ($zone->iterateRecords() as $record) {\r\n        $record->getType();\r\n        $record->getTtl();\r\n        $record->getNode();\r\n    }\r\n    // or iterate in node\r\n    if($zone->isNodeExist(\"node.name\")) {\r\n        $node = $zone->getNode(\"node.name\");\r\n        foreach ($node->iterateRecords() as $record) {\r\n            $record->getType();\r\n            $record->getTtl();\r\n            $record->getNode();\r\n        }\r\n    }\r\n    // or iterate only concrete records in zone or node\r\n    foreach ($zone->iterateA() as $record) {\r\n        $record->getAddress();\r\n        $record->getType();\r\n        $record->getTtl();\r\n        $record->getNode();\r\n    }\r\n    \r\n    // all records can be modified\r\n    foreach ($zone->iterateNs() as $record) {\r\n        $record->setNsdName(\"new.nsd.name.\");\r\n    }\r\n    \r\n    // or they can be deleted\r\n    foreach ($zone->iterateMx() as $record) {\r\n        $record->remove();\r\n    }\r\n    \r\n    // zone can be validate\r\n    if(! $zone->validate()) {\r\n        // and if any errors, you can see them as array\r\n        $zone->getErrorsStore()->toArray();\r\n        // or can iterate via all, and remove invalid records for example\r\n        foreach ($zone->getErrorsStore()->iterate() as $error) {\r\n            if($error->isHasRecord()) {\r\n                $error->getRecord()->remove();\r\n            }\r\n        }\r\n    }\r\n    \r\n    // You can print zone as string, to put in in real zone file\r\n    $content = (string) $zone;\r\n    file_put_contents(__DIR__.\"/dns/zones/zone.conf\", $content);\r\n    \r\n    // Or you can store it in array format\r\n    $array_content = $zone->toArray();\r\n    \r\n    // and make zone again from array format\r\n    Zone::fromArray(\"voksiv.ru.\", $array_content);\r\n```\r\n\r\n### Dns zone file tokenize only\r\nif you want only tokenize zone file you can use this [library](https://github.com/LTD-Beget/dns-zone-parser) \r\n\r\n\r\n### Developers\r\n\r\n## Regenerate documentation\r\n```shell\r\n$ ./vendor/bin/phpdox\r\n```\r\n\r\n### Run tests\r\n\r\n```shell\r\n$ php phpunit.phar --coverage-html coverage\r\n```\r\n\r\n## License\r\n\r\ndns-zone-configurator is released under the MIT License.\r\nSee the [bundled LICENSE file](LICENSE) for details.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}